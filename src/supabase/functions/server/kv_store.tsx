/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

/* Table schema:
CREATE TABLE kv_store_5fb7f1b2 (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/


// This file provides a simple key-value interface for storing Figma Make data. It should be adequate for most small-scale use cases.
import { createClient } from "@supabase/supabase-js";

// Cross-runtime env getter: Node (process.env), Deno (Deno.env), Vite (import.meta.env)
const getEnvVar = (name: string): string | undefined => {
  // Node.js
  if (typeof globalThis !== "undefined" && (globalThis as any).process?.env) {
    return (globalThis as any).process.env[name];
  }
  // Deno (e.g., Supabase Edge Functions)
  if (typeof (globalThis as any).Deno !== "undefined" && typeof (globalThis as any).Deno.env?.get === "function") {
    try {
      return (globalThis as any).Deno.env.get(name);
    } catch {
      // ignore if not permitted
    }
  }
  // Vite/Browser build-time env
  if (typeof import.meta !== "undefined" && (import.meta as any).env) {
    return (import.meta as any).env[name];
  }
  return undefined;
};

// IMPORTANT: Do NOT expose SERVICE_ROLE_KEY to the browser. If this code runs client-side,
// ensure you only read public envs like VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY.
// Keep this file server-only or use appropriate runtime guards.
const client = () =>
  createClient(
    getEnvVar("SUPABASE_URL") || getEnvVar("VITE_SUPABASE_URL") || "",
    getEnvVar("SUPABASE_SERVICE_ROLE_KEY") || getEnvVar("VITE_SUPABASE_ANON_KEY") || "",
  );

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_5fb7f1b2").upsert({
    key,
    value
  });
  if (error) {
    throw new Error(error.message);
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  const supabase = client()
  const { data, error } = await supabase.from("kv_store_5fb7f1b2").select("value").eq("key", key).maybeSingle();
  if (error) {
    throw new Error(error.message);
  }
  return data?.value;
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_5fb7f1b2").delete().eq("key", key);
  if (error) {
    throw new Error(error.message);
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_5fb7f1b2").upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
  if (error) {
    throw new Error(error.message);
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys: string[]): Promise<any[]> => {
  const supabase = client()
  const { data, error } = await supabase.from("kv_store_5fb7f1b2").select("value").in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d) => d.value) ?? [];
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys: string[]): Promise<void> => {
  const supabase = client()
  const { error } = await supabase.from("kv_store_5fb7f1b2").delete().in("key", keys);
  if (error) {
    throw new Error(error.message);
  }
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix: string): Promise<any[]> => {
  const supabase = client()
  const { data, error } = await supabase.from("kv_store_5fb7f1b2").select("key, value").like("key", prefix + "%");
  if (error) {
    throw new Error(error.message);
  }
  return data?.map((d) => d.value) ?? [];
};